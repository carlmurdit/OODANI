package com.carlmur.dani;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Locale;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.speech.RecognizerIntent;
import android.speech.tts.TextToSpeech.OnInitListener;
import android.speech.tts.TextToSpeech;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;
import android.widget.TextView;

public class MainActivity extends Activity implements OnClickListener, OnInitListener {
	
	private String server_IP; //user will be prompted at startup
	private int server_Port;

	private Handler handler = new Handler();
	private static Socket socket;
	private Boolean listening = false;
	private PrintWriter printWriter;
	private Thread clientThread = null;

	private Voice voice; //object to handle Text to Speech and Speech to Text
	
	private ListView SentenceList; //ListView for displaying messages
	private TextView status;
	private ArrayList<String> allSentences; 
	private Button speechBtn;
	private final String LOG_TAG = "DANI"; //Tag for debug log
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		voice = new Voice();		
		speechBtn = (Button)findViewById(R.id.speech_btn);
		SentenceList = (ListView) findViewById(R.id.word_list);
		allSentences = new ArrayList<String>();
		status = (TextView)findViewById(R.id.status);
			
		try {
		    //start the checking Intent - will retrieve result in onActivityResult
		    Intent TTSDataCheckIntent = voice.CheckTTSDataIntent(getPackageManager(), this);
		    startActivityForResult(TTSDataCheckIntent, voice.TTS_DATA_CHECK_CODE);
		}
		catch (Exception e) {
			//speech recognition not supported, disable button and output message
			Toast.makeText(MainActivity.this, "Voice Initialisation failed. "+e.getMessage(), Toast.LENGTH_LONG).show();
		    speechBtn.setEnabled(false);
		}
			
	    speechBtn.setOnClickListener(this);
	    		   			
		//detect user clicking a sentence in the list
		SentenceList.setOnItemClickListener(new OnItemClickListener() {
		    public void onItemClick(AdapterView<?> parent, View view, int position, long id)
		    {
		        TextView wordView = (TextView)view; //cast the view
		        String wordChosen = (String) wordView.getText(); //get the sentence
		        Log.v(LOG_TAG, "chosen: "+wordChosen); //add to debug log	      
		        voice.TextToSpeech(wordChosen); //speak the word using the TTS
		    }
		});
		
	}
	
	@Override
	protected void onStart() {
		super.onStart();
		promptForServer(); //prompt user for server ip & port
	}
	
	void promptForServer()
	{
		AlertDialog.Builder alertDialog = new AlertDialog.Builder(this);
		alertDialog.setTitle("DANI Setup");
		alertDialog.setIcon(R.drawable.ic_launcher);
		alertDialog.setMessage("Enter the DANI Server IP and Port, separted by a colon.");
		final EditText txtServer = new EditText(this);
		txtServer.setText("192.168.3.11:11000", TextView.BufferType.EDITABLE);
		alertDialog.setView(txtServer);
		alertDialog.setPositiveButton("OK", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {
				String input =  txtServer.getText().toString();
				if (!input.contains(":")) {
				    throw new IllegalArgumentException("String " + input + " does not contain a colon (:).");
				}
				String[] parts =input.split(":");
				server_IP = parts[0];
				server_Port = Integer.parseInt(parts[1]);
			}
		});
		alertDialog.show(); //show the input box
	}
	
	@Override
	protected void onStop() {
		super.onStop();
		//shut down comms gracefully
		try {
			socket.shutdownInput();
			socket.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void AddToConversation(String sentence)
	{
		allSentences.add(sentence);
		SentenceList.setAdapter(new ArrayAdapter<String> (this, R.layout.word, allSentences));
        SentenceList.setSelection(SentenceList.getCount() - 1);
	}
	
	//Start the listening intent when the user presses the speak button
	public void onClick(View v) {
	    if (v.getId() == R.id.speech_btn) {
	    	status.setText("");
	    	Intent listenIntent = voice.StartListeningIntent();
	    	startActivityForResult(listenIntent, Voice.VOICE_RECOGNITION_CODE);
	    }
	}
	
	//Handle results of calls to Text to Speech engine
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
	    
		try
		{
			
			//check result of speech recognition data check at startup 
			if (requestCode == voice.TTS_DATA_CHECK_CODE)
		    {
		    	/* Voice Data Check always fails due to bug in 4.1 JellyBean, so skipping check */
		        // if (resultCode == TextToSpeech.Engine.CHECK_VOICE_DATA_PASS)
		    		  //voice.InitialiseTextToSpeech(this,this);
		    	voice.repeatTTS = new TextToSpeech(this, this);
				// else
		        //    data not installed, take user to TTS download page in Google Play
				//	  {
				//	  Intent installTTSIntent = new Intent();
				//	  installTTSIntent.setAction(TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA);
				//	  startActivity(installTTSIntent);
				//    }
		    }

		    //returned from voice recognition
			if (requestCode ==  Voice.VOICE_RECOGNITION_CODE && resultCode == RESULT_OK)
		    {
		        //store the returned word list as an ArrayList
		        ArrayList<String> suggestedWords = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
		        //set the retrieved list to display in the ListView using an ArrayAdapter
		        String userSaid = suggestedWords.get(0);
		        AddToConversation("YOU:  "+userSaid);	
		        SendToServer(userSaid);
		    }		   
	    
		    //call superclass method
		    super.onActivityResult(requestCode, resultCode, data);
			}
		catch (Exception e)
		{
			Toast.makeText(MainActivity.this, "Activity Result failed. "+e.getMessage(), Toast.LENGTH_LONG).show();
		}	
	}
	
	//Fires when TTS initializes
	public void onInit(int initStatus) {
		//if successful, set locale
		if (initStatus == TextToSpeech.SUCCESS)
		    voice.repeatTTS.setLanguage(Locale.UK);//***choose your own locale here***
	}
		
	public void SendToServer(String msg)
	{
		if (!listening) {
			clientThread = new Thread(new ClientThread());
			clientThread.start();
			int i=0;
			while (!listening || i>10) {
				i+=1;
				try{ Thread.sleep(50); }
				catch(InterruptedException e){ 
					Toast.makeText(MainActivity.this, "Failed to start listener. "+e.getMessage(), Toast.LENGTH_LONG).show();
				}
			}
		}
		final String Message = msg;
		//status.setText(msg);
		handler.post(new Runnable() {
			@Override
			public void run() {
				printWriter.println(Message); //status.getText());
			}
		});
	}
	
	public class ClientThread implements Runnable {
		public void run() {
			try {
				InetAddress serverAddr = InetAddress.getByName(server_IP);

				handler.post(new Runnable() {
					@Override
					public void run() {
						status.setText("Connecting to "+server_IP+":"+server_Port+"...");
					}
				});

				socket = new Socket(); //
				socket.bind(null); //
                socket.connect((new java.net.InetSocketAddress(serverAddr, server_Port)), 4000);//
				//socket = new Socket(serverAddr, server_Port);				
				try {
					printWriter = new PrintWriter(new BufferedWriter(
							new OutputStreamWriter(socket.getOutputStream())),
							true);

					//---get an InputStream object to read from the server---
					BufferedReader br = new BufferedReader(
							new InputStreamReader(socket.getInputStream()));

					try {
						//---read all incoming data terminated with a \n
						// char---
						String line = null;
						listening = true;
						while ((line = br.readLine()) != null) {
							final String strReceived = line;

							handler.post(new Runnable() {
								@Override
								public void run() {
									AddToConversation("DANI: "+strReceived);
									voice.TextToSpeech(strReceived);
								}
							});
						}

/*						//---disconnected from the server---
						handler.post(new Runnable() {
							@Override
							public void run() {
								textView1.setText(textView1.getText()
										+ "\n" + "Server disconnected");
							}
						});*/

					} catch (Exception e) {
						final String error = e.getLocalizedMessage();
						handler.post(new Runnable() {
							@Override
							public void run() {
								status.setText("Error: " + error);
							}
						});
					}

				} catch (Exception e) {
					final String error = e.getLocalizedMessage();
					handler.post(new Runnable() {
						@Override
						public void run() {
							status.setText("Error: " + error);
						}
					});
				}

				handler.post(new Runnable() {
					@Override
					public void run() {
						status.setText("Connection closed.");
						listening = false;
					}
				});

			} catch (Exception e) {
				final String error = e.getLocalizedMessage();
				handler.post(new Runnable() {
					@Override
					public void run() {
						status.setText("Error: "+error);
						messageBox("Error: "+error);
						listening = false;
					}
				});
			}
		}
		
	}
	
	void messageBox(String msg)
	{
		AlertDialog.Builder alertDialog = new AlertDialog.Builder(this);
		alertDialog.setTitle("Error in DANI");
		alertDialog.setIcon(R.drawable.ic_launcher);
		alertDialog.setMessage(msg);
		alertDialog.setPositiveButton("OK", new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				return;
			}
		});
		alertDialog.show();
	}

}
